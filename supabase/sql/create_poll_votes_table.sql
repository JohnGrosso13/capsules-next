-- Ensure posts table has a poll column to store question/options/counts
ALTER TABLE public.posts
ADD COLUMN IF NOT EXISTS poll JSONB;

-- Poll votes table storing one vote per user per poll (identified by user_key)
CREATE TABLE IF NOT EXISTS public.poll_votes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_key TEXT NOT NULL,
  user_id UUID NULL REFERENCES public.users(id) ON DELETE SET NULL,
  option_index INTEGER NOT NULL CHECK (option_index >= 0),
  created_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (post_id, user_key)
);

-- Enable RLS and allow service role full access (API layer runs with service_role)
ALTER TABLE public.poll_votes ENABLE ROW LEVEL SECURITY;
DO $$
BEGIN
  CREATE POLICY "Service role full access" ON public.poll_votes
    TO service_role USING (true) WITH CHECK (true);
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

-- Helpful indexes
CREATE INDEX IF NOT EXISTS idx_poll_votes_post_id ON public.poll_votes(post_id);
CREATE INDEX IF NOT EXISTS idx_poll_votes_user_key ON public.poll_votes(user_key);
CREATE INDEX IF NOT EXISTS idx_poll_votes_user_id ON public.poll_votes(user_id);

-- Optional view for aggregate counts
CREATE OR REPLACE VIEW public.poll_vote_counts AS
SELECT post_id, option_index, COUNT(*)::INT AS votes
FROM public.poll_votes
GROUP BY post_id, option_index;
